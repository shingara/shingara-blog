<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Shiny happy people coding]]></title>
  <link href="http://blog.shingara.fr/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://blog.shingara.fr/"/>
  <updated>2013-06-25T23:44:03+02:00</updated>
  <id>http://blog.shingara.fr/</id>
  <author>
    <name><![CDATA[Cyril Mougel]]></name>
    <email><![CDATA[cyril.mougel@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[0 Downtime avec Unicorn]]></title>
    <link href="http://blog.shingara.fr/0-downtime-avec-unicorn.html"/>
    <updated>2013-06-22T15:50:00+02:00</updated>
    <id>http://blog.shingara.fr/0-downtime-avec-unicorn</id>
    <content type="html"><![CDATA[<p>J'ai eu la chance de participer au premier <a href="http://ruby-paris-bbl.tumblr.com/">rendez vous BBL Paris</a>.
Dans le cadre de cette rencontre, nous avons parlé de nos processus de déploiement.
Je vais essayer de faire quelques billets sur mes processus de déploiement.</p>

<h1>Le Server web</h1>

<p>Pour déployer une application ruby, il nous faut un serveur web. Il en
existe beaucoup dans l'écosystème ruby. Passenger, Thin,
<a href="http://unicorn.bogomips.org/">Unicorn</a>, Puma
sont les plus connus. J'utilise personnelement unicorn depuis plusieurs
années. Mon choix a surtout été fait suite à la possbilité d'avoir un 0
Downtime. J'utilisais précédement thin et la mise en place d'un 0
downtime est assez compliqué. Pour Unicorn, tout est fait en interne.
C'est une fonctionnalité de base.</p>

<h1>Comment réaliser ce 0 downtime ?</h1>

<p>Pour expliquer comment ceci est possible, il faut comprendre
<a href="http://unicorn.bogomips.org/DESIGN.html">l'architecture de Unicorn</a>.
Unicorn a un système maître / workers. Au démarrage de unicorn, un processus maitre se lance et
lance une série de processus par fork(2) suivant la configuration. Tous
ces processus seront ceux qui exécuteront réelement votre application.
Le processus maitre ne sert qu'à gérer le dispatching entre les
différents workers.</p>

<p>L'avantage de cette architecture est que vous n'avez pas besoin de
load-balancing devant votre unicorn. C'est unicorn lui-même qui gére le
système.</p>

<p>Mais ce qui est très pratique est que le processus maitre comprend très
bien les <a href="http://unicorn.bogomips.org/SIGNALS.html">signaux UNIX</a>. Les signaux UNIX sont hélas très souvent
sous-utilisé alors qu'ils sont très puissant.</p>

<p>Le signal le plus utile pour notre 0 downtime est le USR2. D'après la
documentation, "relance l'executable binaire. Un QUIT doit être envoyé
au process original une fois que l'enfant a été constaté comme UP et lancé".
En résumé, quand le processus maitre recoit le SIGNAUX USR2, il relance un
nouveau process maitre. Par contre, la documentation explique bien qu'il
faut penser à lancer un SIGNAUX QUIT au process initial pour qu'il
s'arrête réelement.</p>

<p>Pour réaliser ce dernier point, il faut donc penser à configurer
correctement unicorn pour qu'il fasse ce QUIT. Voici donc la
configuration que j'utilise pour ça.</p>

<p>```
before_fork do |server, worker|</p>

<p>  old_pid = "pids/unicorn.pid.oldbin"
  if File.exists?(old_pid) &amp;&amp; server.pid != old_pid</p>

<pre><code>begin
  Process.kill("QUIT", File.read(old_pid).to_i)
rescue Errno::ENOENT, Errno::ESRCH
  # someone else did our job for us
end
</code></pre>

<p>  end</p>

<p>end
```</p>

<p>le <code>before_fork</code> se lance une fois que le processus maitre est UP et
qu'il va commencer a créer un fork pour avoir un travailleur.</p>

<p>Le Signal QUI lancé durant le <code>before_fork</code> arrêtera les processus Unicorn
une fois qu'il a fini de traiter toutes les requêtes en cours. C'est ce
méchanisme qui nous permet le 0 downtime.</p>

<h1>Le problème du Gemfile</h1>

<p>Toutes les personnes qui n'utilise pas ce méchanisme, ne le font pas
suite à un problème de configuration avec Bundler. Une
<a href="http://unicorn.bogomips.org/Sandbox.html">documentation compléte existe à ce sujet</a>.</p>

<p>En gros, la technique est simplement de penser à définir le PATH du
Gemfile directement par la variable d'environement <code>BUNDLE_GEMFILE</code>.</p>

<p>Soit lors du démarrage du process.</p>

<p><code>
BUNDLE_GEMFILE=./Gemfile unicorn -c config/unicorn.rb
</code></p>

<p>Soit directement dans le fichier de configuration de unicorn</p>

<p><code>
before_exec do |server|
  ENV["BUNDLE_GEMFILE"] = "./Gemfile"
end
</code></p>

<p>Une fois que vous avez configuré correctement votre Gemfile, vous
n'avez plus de problèmes.</p>

<p>Un moyen simple de détection de problème lors du reload, est de vérifier
qu'un nouveau process unicor c'est bien lancé. Si ce nouveau process
échoue, il n'enverra pas le signal QUIT. Le premier process reste donc
vivant et UP. Cela évite entre autre d'avoir une indisponibilité à ce
moment là. On peut vérifier cela avec un simple <code>ps</code> :</p>

<p><code>
ps o "start command" | grep unicorn
</code></p>

<p>Au pire, il suffit cette fois ci de faire un restart du
processus.</p>

<h1>Autre problèmes possible</h1>

<p>Pour les malchanceux comme moi qui ont des applications qui ne sont pas
encore en rails > 3.0, attention il faut penser à utiliser l'executable
<code>unicorn_rails</code>.</p>

<p>J'espére vous avoir faire découvrir mes petits astuces sur Unicorn et
que cela vous sera utile.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Release de public folder]]></title>
    <link href="http://blog.shingara.fr/release-public-folder.html"/>
    <updated>2013-04-06T09:49:00+02:00</updated>
    <id>http://blog.shingara.fr/release-public-folder</id>
    <content type="html"><![CDATA[<p>Depuis maintenant 1 semaine, je suis à la recherche d'un nouvel emploi.
Durant ma recherche d'emploi, on m'a fait une demande d'exercice en
Ruby. Étant un convaincu de l'open source et étant globalement fier de
ce que je peux produire, j'ai décidé de le sortir en open source.</p>

<p>Voici donc <a href="http://github.com/shingara/public_folder">Public Folder</a></p>

<p>Ce projet est extrêment simple, il s'agit d'une interface de gestion de
répertoires. À partir de la racine, on peut ainsi naviguer à travers une
arborescence que l'on peut créer soit même. On peut donc créer des
répertoires et uploader des fichiers directement dans l'application.</p>

<p>Le stockage des fichiers se fait directement sur disque dans la même
arborescence que celle définie dans l'application. Elle est juste comme
git, si vous créez un dossier dans l'application et qu'il ne contient
aucun fichier, le dossier ne sera pas créé sur le disque.</p>

<p>Au niveau de la navigation, l'url correspond à l'architecture du dossier
et on peut trier chaque liste par date/type/poids ou noms.</p>

<p>Pour réaliser cette application, la stack est full Rails, soit
ActionPack et ActiveRecord. J'ai juste utilisé <code>decent_exposure</code>,
<code>simple_form</code> et <code>draper</code> comme gems. Je ne peux plus du tout me passer
d'eux tellement ils sont devenu essentiel pour moi.</p>

<p>Ce projet est complétement testé. J'ai une couverture de
test de 99% selon
<a href="https://coveralls.io/r/shingara/public_folder">Coveralls</a>. Il a une note de 4
sur <a href="http://codeclimate.com/github/shingara/public_folder">CodeClimate</a>. Vous pouvez le voir aussi sur <a href="https://travis-ci.org/shingara/public_folder">Travis</a>.</p>

<p>Je ne compte pas continuer le développement de cette application. Je
n'en ai strictement aucun besoin. Par contre, je la laisse à la
postérité et aux lecteurs de code en tout genre.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pourquoi j'ai arrêté decent_exposure]]></title>
    <link href="http://blog.shingara.fr/pourquoi-jai-arrete-decent-exposure.html"/>
    <updated>2012-07-04T09:49:00+02:00</updated>
    <id>http://blog.shingara.fr/pourquoi-jai-arrete-decent-exposure</id>
    <content type="html"><![CDATA[<p>A la sortie de
<a href="https://github.com/voxdolo/decent_exposure">decent_exposure</a>, j'ai été
très enthousiaste. J'utilisais avant
<a href="https://github.com/josevalim/inherited_resources/">inherited_ressources</a>, mais je
commençais à découvrir les problèmes de <code>inherited_resources</code>. La
personnalisation de son controller peut vite devenir compliqué et peux
lisible si on sort du cadre d'un controller qui soit plus qu'un CRUD
simple. On finissait par avoir un code moyennement
DRY et les test étaient loin d'être évident car impossible coté controller
( limitation indiqué dans le README lui-même ).</p>

<p>Le grand avantage que j'ai vu dans <code>decent_exposure</code> est la facilité
d'accès des variables dans les vues. Plus besoin de faire appel à des
instances. On appele simplement la méthode. Si celui-ci n'était pas
instancié alors <code>decent_exposure</code> le faisait pour nous. On obtenait ainsi un système beaucoup plus souple qui ne
chargeait les objets qu'au moment ou il était nécessaire. Un eager
loading intégré permettait d'éviter de rechercher en base plusieurs fois
le même objet. On pouvait aussi réutiliser plusieurs fois la même vue.
plus besoin de faire des assignations dans certaine action pour être sur
que l'objet existe. Il suffit juste d'exposer l'objet. Après on
l'utilise ou pas. De même l'utilisation des partials devient plus aisé
car, on peux surcharger facilement des variables par l'usage des
<code>locals</code>. J'y ai vu beaucoup d'intérêts.</p>

<p>Mais finalement cet intérêt n'existe que par l'usage de la méthode de
class d'un controller <code>helper_method</code>. Si on crée soit même sa propre
méthode avec son eager loading <code>decent_exposure</code> devient inutile.</p>

<p><code>decent_exposure</code> a été pour moi un révélateur de l'utilité de la
méthode <code>helper_method</code>. Mais à l'usage, je trouve qu'il fait
finalement trop de chose caché si on utilise la méthode d'appel <code>expose</code>
sans bloc. Je me suis ainsi retrouvé à faire des <code>update_attributes</code> 2
fois sur mon objet. Un dans le <code>decent_exposure</code> l'autre dans mon
action. Forcement ça posait quelques soucis. Quand on sait que cela peut
arriver, pas de soucis. Mais c'est toujours embêtant de perdre quelques
heures à débugger le problème quand on le voit. Sans compter les fois ou
on ne le voit pas.</p>

<p>Une des limitations de <code>decent_exposure</code> selon moi est l'override de
cette méthode. Parfois pour éviter les <code>if</code> infini dans cette méthode il
est plus judicieux de définir directement la valeur de retour de cette
méthode dans sa méthode d'action. Cela permet de savoir exactement ce
que retourne cette méthode, mais aussi d'éviter les conflits dans
d'autre action.</p>

<p>Pour réalisé cela ma méthode stocke en mémoisation la variable
d'instance égale au nom de la méthode. Ainsi ma méthode ressemble à ceci
:</p>

<p><code>ruby
def post
  @post ||= Post.find(params[:id])
end
helper_method :post
</code></p>

<p>Si je souhaite donc avoir un nouveau Post retourné par cette méthode
j'ai juste à faire :</p>

<p><code>ruby
def new
  @post = Post.new
end
</code></p>

<p>Je surcharge le retour de la méthode post par la valeur <code>Post.new</code>. Pour
faire cela avec <code>decent_exposure</code> il faut surchargé la variable
<code>@_resource[:post]</code>. Mais rien ne m'assure que ce nom de variable d'instance
soit conservé dans les futurs version de <code>decent_exposure</code>. Une solution serait peut-être de créer une
méthode <code>post=()</code> lors de l'exposition d'un <code>post</code>, mais cela devient
peut-être moins pratique.</p>

<p>Voilà donc les raisons de mon arrêt d'utilisation de <code>decent_exposure</code>.
Je peux très facilement émuler le comportement de <code>decent_exposure</code> et
tout ça sans aucune dépendance externe.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[dante pour mettre du daemon dans son code]]></title>
    <link href="http://blog.shingara.fr/dante-pour-mettre-du-daemon-dans-son-code.html"/>
    <updated>2012-05-09T09:43:00+02:00</updated>
    <id>http://blog.shingara.fr/dante-pour-mettre-du-daemon-dans-son-code</id>
    <content type="html"><![CDATA[<p>J'ai dernièrement eu besoin de convertir un petit script ruby en daemon.</p>

<p>J'utilise dans mes déploiements monitrc pour le monitoring de mes
scripts. Monit check un pidfile pour voir si le processus est actif ou
pas.</p>

<p>J'ai donc cherché en Ruby quel était la meilleure solution pour que mon
script soit un daemon et puisse générer lui-même son pidfile.</p>

<p>Le projet le plus connu est <a href="http://daemons.rubyforge.org/">daemons</a>.
J'ai déjà essayé de l'utiliser, mais je n'en ai jamais été un grand
convaincu. Je l'ai toujours trouvé compliqué. Il ne gére pas la
génération de pidfile. Il faut donc pratiquement tout gérer soit même.</p>

<p>Le deuxième projet le plus connu est une sur-couche de daemons c'est
<a href="https://github.com/kennethkalmer/daemon-kit">daemon-kit</a>. J'avais déjà
tenté de l'utiliser, mais je le trouve vraiment trop rigide pour un
simple script. C'est selon moi plus une massue qu'autre chose pour créer
un daemon.</p>

<p>C'est alors que je me suis rappelé avoir entendu parlé d'un nouveau gem
pour créer des daemons. J'ai cherché et j'ai ainsi pu découvrir
<a href="https://github.com/bazaarlabs/dante">dante</a>. Ce projet est exactement
ce que je cherchais. Il est simple et fait le boulot de créer un daemon.</p>

<p>Par défaut, il supporte quelques arguments à passer en ligne de
commande. Ces arguments font l'essentiel du travail d'un daemon.</p>

<p>Voici une liste des arguments par défaut disponible.</p>

<p>```</p>

<pre><code>-p, --port PORT           Specify port
                          (default: )
-P, --pid FILE            save PID in FILE when using -d option.
                          (default: /var/run/scheduler.pid)
-d, --daemon              Daemonize mode
-l, --log FILE            Logfile for output
-k, --kill [PORT]         Kill specified running daemons - leave
</code></pre>

<p>blank to kill all.</p>

<pre><code>-u, --user USER           User to run as
-G, --group GROUP         Group to run as
-?, --help                Display this usage information.
</code></pre>

<p>```</p>

<p>On peux ainsi définir, le PID, le fichier de log, l'utilisateur et le
group lançant le daemon ( si lancé en root ). Seul petit argument qui ne
me semble pas essentiel, c'est l'argument du port. Mais l'usage initial
de dante est de lancé des applications rack. Voila pourquoi on
retrouve cet argument.</p>

<p>Une de ses autre fonctionnalités intéressantes est tout simplement le
fait que l'on peux ajouter des options. Il peux donc aussi servir de
gestion d'option pour son application.</p>

<p>Pour l'utiliser rien de plus simple. Il suffit de mettre votre script
dans un block <code>Dante.run</code></p>

<p><code>ruby
Dante.run('myapp') do |opts|
  myapp.run
end
</code></p>

<p>Je suis vraiment impressionné par ce gem qui est issu de la société
<a href="http://gomiso.com">gomiso</a>. Merci à elle de nous permettre d'avoir
d'aussi bon gem.</p>

<p><a href="http://blog-en.shingara.fr/dante-lets-you-put-some-daemon-in-your-code.html">English Translation</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[moped le nouveau driver mongodb pour ruby]]></title>
    <link href="http://blog.shingara.fr/moped-le-nouveau-driver-mongodb-pour-ruby.html"/>
    <updated>2012-04-30T09:42:00+02:00</updated>
    <id>http://blog.shingara.fr/moped-le-nouveau-driver-mongodb-pour-ruby</id>
    <content type="html"><![CDATA[<p>Depuis décembre 2011, <a href="https://github.com/bernerdschaefer">Bernerd Schaefer</a> a commencé a créer un
driver MongoDB pour ruby. Ce nouveau driver MongoDB n'a pas été crée par
10Gen (créateur de MongoDB) contrairement au gem
<a href="https://github.com/mongodb/mongo-ruby-driver">mongo-ruby-driver</a>.</p>

<h1>Le but de ce gem</h1>

<p>Ce gem a été crée suite aux frustrations de l'équipe de développement de
Mongoid qui a fait plusieurs fois des propositions de changement de
design du driver officiel. Tous changement de design du driver a été
refusé.</p>

<h2>Thread-safe</h2>

<p>Un des buts de ce gem est de permettre d'avoir un gem qui est le plus
possible thread-safe. Le driver officiel mongoDB est parfois considéré
comme non thread-safe notament par <a href="https://github.com/mperham/sidekiq/wiki/Problems-and-Troubleshooting">Mike Perham</a>.
C'est un vrai problème alors que la communauté ruby
commence enfin à redécouvrir les threads. Cet état empêche par exemple
l'usage de <a href="http://mperham.github.com/sidekiq/">sidekiq</a> avec MongoDB.</p>

<h2>Suppression de l'extension</h2>

<p>Avec le driver MongoDB officiel, il est très fortement conseillé
d'installer le gem <a href="http://rubygems.org/gems/bson_ext">bson_ext</a> sans
celui-ci les performances sont beaucoup moins bonnes. Par contre cette
extension étant écrite en C, elle est incompatible avec JRuby. Il a
fallu créer une version JRuby du gem bson. Ça rend la maintenabilité
plus complexe.</p>

<p>Dans le cas de moped, aucune extension C n'est à prévoir.
Il est naturellement plus performant. Il arriverait même à être plus
performant que l'extension C selon
les benchmarks réalisés pour le projet.</p>

<p>Seul ombre au tableau, la génération d'un ObjectId est plus lente avec
moped qu'avec le gem officiel bson selon un <a href="https://groups.google.com/d/topic/mongoid/87IdIKO8-VM/discussion">thread de la mailing-list de Mongoid</a>.
Mais cela pourra être améliorer par la suite, je n'en doute pas.</p>

<h2>Une API plus simple</h2>

<p>L'API de moped est vraiment plus belle que celle du gem mongo. Ce
changement est bien sûr subjectif. Elle est beaucoup plus orienté ruby.
Elle permet aussi la combinaison de recherche/mise à jour.</p>

<h2>Meilleure gestion du replicat Set</h2>

<p>Une des fonctionnalités principale de MongoDB est la gestion du
replicatSet. Avec Moped, cette gestion devient vraiment plus souple et
surtout ne lève plus d'exception la première fois que le node maître est
down. Cette fois ci le basculement se fait automatiquement.</p>

<p>Plus besoin de passer la liste de vos nodes en configuration. Moped
utilise directement les mécanismes de MongoDB pour découvrir les
nouveaux nodes et ainsi les utiliser.</p>

<h1>Les limitations</h1>

<p>Par contre, moped a certaine limitation.</p>

<h2>Ruby 1.9 uniquement</h2>

<p>Moped n'est pas compatible avec Ruby &lt; 1.9. Le choix de l'implémentation
a été fait de ne pas être compatible avec les plus anciennes version de
ruby.</p>

<p>Personnellement, je suis d'accord avec ce choix, car l'usage de ruby 1.8
doit disparaitre.</p>

<h2>Pas de support de GridFS</h2>

<p>GridFS n'est pas supporté nativement dans moped. Ce choix a été fait
pour limiter le core du gem. Bien sûr rien n'empêche de créer une
extension de moped gérant GridFS.</p>

<h1>Intégration dans Mongoid 3</h1>

<p>Mongoid 3.x utilisera désormais moped à la place du driver mongodb de
10Gen. Si vous souhaitez donc commencer un peu à l'utiliser essayer
cette nouvelle version majeur de Mongoid.</p>

<p>Attention, Mongoid 3 n'est actuellement pas release. Si vous souhaitez
l'utiliser il faudra utiliser la branche master de Mongoid. Le
dévelopment y est toujours actif.</p>

<p><code>ruby
gem 'mongoid', :git =&gt; 'git://github.com/mongoid/mongoid'
</code></p>

<p><a href="http://blog-en.shingara.fr/moped-the-new-mongodb-ruby-driver.html">English Translation</a></p>
]]></content>
  </entry>
  
</feed>
