<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: gem | Shiny happy people coding]]></title>
  <link href="http://blog.shingara.fr/blog/categories/gem/atom.xml" rel="self"/>
  <link href="http://blog.shingara.fr/"/>
  <updated>2012-06-08T15:07:48+02:00</updated>
  <id>http://blog.shingara.fr/</id>
  <author>
    <name><![CDATA[Cyril Mougel]]></name>
    <email><![CDATA[cyril.mougel@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[dante pour mettre du daemon dans son code]]></title>
    <link href="http://blog.shingara.fr/dante-pour-mettre-du-daemon-dans-son-code.html"/>
    <updated>2012-05-09T09:43:00+02:00</updated>
    <id>http://blog.shingara.fr/dante-pour-mettre-du-daemon-dans-son-code</id>
    <content type="html"><![CDATA[<p>J'ai dernièrement eu besoin de convertir un petit script ruby en daemon.</p>

<p>J'utilise dans mes déploiements monitrc pour le monitoring de mes
scripts. Monit check un pidfile pour voir si le processus est actif ou
pas.</p>

<p>J'ai donc cherché en Ruby quel était la meilleure solution pour que mon
script soit un daemon et puisse générer lui-même son pidfile.</p>

<p>Le projet le plus connu est <a href="http://daemons.rubyforge.org/">daemons</a>.
J'ai déjà essayé de l'utiliser, mais je n'en ai jamais été un grand
convaincu. Je l'ai toujours trouvé compliqué. Il ne gére pas la
génération de pidfile. Il faut donc pratiquement tout gérer soit même.</p>

<p>Le deuxième projet le plus connu est une sur-couche de daemons c'est
<a href="https://github.com/kennethkalmer/daemon-kit">daemon-kit</a>. J'avais déjà
tenté de l'utiliser, mais je le trouve vraiment trop rigide pour un
simple script. C'est selon moi plus une massue qu'autre chose pour créer
un daemon.</p>

<p>C'est alors que je me suis rappelé avoir entendu parlé d'un nouveau gem
pour créer des daemons. J'ai cherché et j'ai ainsi pu découvrir
<a href="https://github.com/bazaarlabs/dante">dante</a>. Ce projet est exactement
ce que je cherchais. Il est simple et fait le boulot de créer un daemon.</p>

<p>Par défaut, il supporte quelques arguments à passer en ligne de
commande. Ces arguments font l'essentiel du travail d'un daemon.</p>

<p>Voici une liste des arguments par défaut disponible.</p>

<p>```</p>

<pre><code>-p, --port PORT           Specify port
                          (default: )
-P, --pid FILE            save PID in FILE when using -d option.
                          (default: /var/run/scheduler.pid)
-d, --daemon              Daemonize mode
-l, --log FILE            Logfile for output
-k, --kill [PORT]         Kill specified running daemons - leave
</code></pre>

<p>blank to kill all.</p>

<pre><code>-u, --user USER           User to run as
-G, --group GROUP         Group to run as
-?, --help                Display this usage information.
</code></pre>

<p>```</p>

<p>On peux ainsi définir, le PID, le fichier de log, l'utilisateur et le
group lançant le daemon ( si lancé en root ). Seul petit argument qui ne
me semble pas essentiel, c'est l'argument du port. Mais l'usage initial
de dante est de lancé des applications rack. Voila pourquoi on
retrouve cet argument.</p>

<p>Une de ses autre fonctionnalités intéressantes est tout simplement le
fait que l'on peux ajouter des options. Il peux donc aussi servir de
gestion d'option pour son application.</p>

<p>Pour l'utiliser rien de plus simple. Il suffit de mettre votre script
dans un block <code>Dante.run</code></p>

<p><code>ruby
Dante.run('myapp') do |opts|
  myapp.run
end
</code></p>

<p>Je suis vraiment impressionné par ce gem qui est issu de la société
<a href="http://gomiso.com">gomiso</a>. Merci à elle de nous permettre d'avoir
d'aussi bon gem.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quiet Assets le gem qui limite les logs]]></title>
    <link href="http://blog.shingara.fr/quiet-assets-le-limiteur-de-log.html"/>
    <updated>2012-04-25T09:42:00+02:00</updated>
    <id>http://blog.shingara.fr/quiet-assets-le-limiteur-de-log</id>
    <content type="html"><![CDATA[<p>Voici une semaine, j'ai découvert un gem vraiment pratique.
<a href="https://github.com/evrone/quiet_assets">quiet_assets</a>.</p>

<p>Ce gems ne fait pas grand chose, mais a de grand avantage quand on
développe une application Rails (> 3.1) avec des assets en utilisant la
technologie 'asset_pipeline'.</p>

<p>Si c'est votre cas, vous vous êtes déjà rendu compte que chaques requêtes faites
à votre application pour obtenir vos assets est logués dans votre
fichier de log ( development.log en environement de dévelopment ). Des
requêtes comme celle-ci :</p>

<p><code>
Started GET "/assets/application.js?body=1" for 127.0.0.1 at 2012-02-13 13:24:04 +0400
Served asset /application.js - 304 Not Modified (8ms)
</code></p>

<p>On se retrouve ainsi à devoir remonter dans son fichier de logs pour
obtenir les logs qui nous interresse vraiment ( les log de la requête
courante ). Notre fichier de log est
vraiment pollué par ces assets si vous en avez comme moi beaucoup.</p>

<p>C'est là que <a href="https://github.com/evrone/quiet_assets">quiet_assets</a>
devient vraiment interressant et pratique. Vous ajoutez ce gem dans
votre Gemfile au niveau du groupe 'development' et tous vos logs d'assets
disparaissent. Ils ne sont tous simplement plus logguées dans votre fichier
de log. On retrouve ainsi un fichier de log rapide a consulter et moins
pollué par des informations inutiles.</p>

<p>Comme quoi de tout petits gems peuvent nous rendre de grand service.</p>

<p><em>Edit du 27 Avril 2012</em></p>

<p>On pourrait se dire que cela pourrait être directement integré à Rails.
Hélas cela à été fait en partie, mais pas complétement.</p>

<p>Depuis la version 3.2.x et l'<a href="https://github.com/rails/rails/issues/2639">issue 2639</a>
nous pouvons configurer le logger de Sprockets. Mais il n'est pas seul à
afficher les informations. Actionpack log toujours les requêtes faites
pour obtenir ces assets. Vous ne pourrez donc pas avoir un fichier de
log complétement épuré.</p>

<p><a href="http://blog-en.shingara.fr/quiet-assets-help-you-to-have-little-log.html">English translation</a></p>
]]></content>
  </entry>
  
</feed>
