<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: script | Shiny happy people coding]]></title>
  <link href="http://blog.shingara.fr/blog/categories/script/atom.xml" rel="self"/>
  <link href="http://blog.shingara.fr/"/>
  <updated>2012-07-12T10:01:09+02:00</updated>
  <id>http://blog.shingara.fr/</id>
  <author>
    <name><![CDATA[Cyril Mougel]]></name>
    <email><![CDATA[cyril.mougel@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Récupération de ses fichiers sur basecamp]]></title>
    <link href="http://blog.shingara.fr/telecharger-fichier-de-basecamp.html"/>
    <updated>2012-04-20T09:38:00+02:00</updated>
    <id>http://blog.shingara.fr/telecharger-fichier-de-basecamp</id>
    <content type="html"><![CDATA[<p>Au niveau de mon travail actuel chez <a href="http://bemyboat.com">Be My Boat</a>,
nous sommes actuellement en train de migrer de
<a href="http://basecamphq.com">Basecamp</a> vers
<a href="http://trello.com">Trello</a>.</p>

<p>Pour éviter de perdre toutes les informations qui ont été mis dans
basecamp, nous avons réalisé un import complet. Par contre, l'import ne
comprend pas les fichiers qui ont pu être ajouté dans basecamp.</p>

<p>Pour ne pas perdre ces fichiers qui font parti du patrimoine de
l'entreprise, j'ai créé un petit script pour télécharger tous ces
fichiers.</p>

<p>Je vous le partage si vous en avez besoin un jour.</p>

<p><div><script src='https://gist.github.com/2420838.js?file='></script>
<noscript><pre><code>require 'faraday'
require 'faraday_middleware'

url_project = 'https://ciblonet.basecamphq.com'
project_id = 3684800
user_name = 'shingara'
password = 'xxxx'

class Attachment

  def initialize(conn, attachment)
    @conn = conn
    @attachment = attachment
  end

  def collection
    @attachment['collection'].to_s
  end

  def dir
    Dir.mkdir(collection) unless Dir.exists?(collection)
    collection
  end

  def fetch
    File.new(File.join(dir, @attachment['name']), 'w').write(@conn.get(@attachment['download_url']).body)
  end
end

class Attachments
  def initialize(conn, project_id, step=nil)
    @conn = conn
    @project_id = project_id
    @attachments_index = 100
    @step = step
  end

  def url
    if @step
      &quot;/projects/#{@project_id}/attachments.xml?n=#{@step}&quot;
    else
      &quot;/projects/#{@project_id}/attachments.xml&quot;
    end
  end

  def entries
    @entries ||= @conn.get(url) do |req|
      req.headers['Accept'] = 'application/xml'
      req.headers['Content-Type'] = 'application/xml'
    end.body['attachments']
  end

  def fetch
    entries.each do |attachment|
      Attachment.new(@conn, attachment).fetch
    end
  end

  def more?
    entries.size &gt; 99
  end
end


class FetchAttachments

  def self.execute(conn, project_id)
    a = Attachments.new(conn, project_id)
    a.fetch
    step = 100
    while a.more?
      a = Attachments.new(conn, project_id, step)
      a.fetch
      step += 100
    end
  end
end

con = Faraday.new(:url =&gt; url_project) do |builder|
  builder.use Faraday::Request::BasicAuthentication, user_name, password
  builder.use Faraday::Response::Logger
  builder.response :xml,  :content_type =&gt; /\bxml$/
  builder.use Faraday::Adapter::NetHttp
end

FetchAttachments.execute(con, project_id)
</code></pre></noscript></div>
</p>

<p>Dans ce script j'utilise
<a href="https://github.com/technoweenie/faraday">Faraday</a> pour faire le requêtage avec l'API et
aussi télécharger les fichiers. Je suis personnellement un grand fan de
Faraday. C'est selon moi la meilleure librairie de requêtage HTTP
actuelle du monde Ruby. Utilisez la dès que vous avez besoin de faire du
requêtage HTTP.</p>
]]></content>
  </entry>
  
</feed>
